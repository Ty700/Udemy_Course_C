Unions
    Union Overview
        - a union is a derived type (similar to a struct) with members that share the same storage space.
            - sometimes the same type of construct needs different types of data
        - used mainly in advanced programming apps where it is neceessary to store different types of data in the same storage area
            - can be used to save space and for alternating data
            - a union does not waste storage on variables that are not being used.
        
        - each element in a union is a memeber

        - can define a union with many members
            - only one can be assigned a value
        
        - the members can be of any data type

        - it is my responsibilty to ensure that the data in a union is referenced with the proper data type
            
        - the operations that can be performed on a union are:
            - assigning a union to another union of the same type
            - taking the address of a union variable
            - accessing union members
        
    Use case examples:
        -unions are particulary useful in embedded programming
            - situations where direct access to the hardware/memory is needed

        - you could use a union to represent a table that stores a mixture of types in some order

        - you could create an array of unions that store equal-sized units
            - each of whihc can hold a variety of data types
        
        - a union could represent a file containing different record types

        - a union could represent a network interface containing different request types
    
    Memory Allocation for a Union
        - although structs are similar to unions, the memory allocated for a union is quite different than for a struct
        
        - every time you create an instance of a struct, the computer will lay out the fields in memory, one after the other
            - allocates storage space for all its members separately

        - with a union, all the members have an offset of zero
            - one common storage space for all its members
    
        - a union is created with enough space for its largest field 
            - the programmer then decides which value will be stored there

        - if you have a union called quantity, with fields called count, weight, and volume
            - whether you set the count, weight, or volume field, the data will go into the same space in memory
        

    Example:
        - if you want to keep track of a quantity of something

        - you could create a struct like:

        typedef struct {
            ...
            short count;
            float weight;
            float volume;
            ...
        } fruit;

        - there are af few reasons why this is not a good idea
        - someone might set more than one value 
        - there is nothing called "quantity"

        - a union should be used in this situation
            - you could specify something calledf quantity in a data type
            - you can decided for each particular piece of daata whether you are going to record a count, a weight, or a volume against it

    Structs vs Unions
        - you should use a structure when your construct should be a group of other things
        - you should use a union when your construct can be one of many different things but only one at a time
        - unions are typically used in situations where space is premium but more importantly for exclusively alternating data
        - unions ensure that mutually exclusive states remain mutually exclusive
        - unions share a common storage space where structures store several data types simultaneously
            - a struct can hold an int and a double and a char
            - a union can hold an int or a double or a char

Defining a union
    - the declaration for a union is identical to that of a structure
        - except the keyword union is used where the keyword struct is otherwise specified
    
    - a union has the general form:
        union Name {
            int var1;
            float var2;
            ...
        } unionVarName;
        
        - the union tag is optional and each member definition is a normal varaible definition
        - at the end of the union's definition, before the final semicolon, you can specify one or more union varsiables
        - the union definition is normally placed in a header and included in all source files that use the union type
    
    Example:
        union Data{
            int i;
            floaft f;
            char str[20];
        }data;

        - the above does not define data to conatin three distinct members called i, f, and str
        - the memory occupied by a union will be large enough to hold the largest member of the union
            - this one will be 20 bytes
        
    Creating union variables
        - when a union is defined, it createsa a user-defined type
            - no memory is allocated
            - to allocatge memory for a given union type and work with it, we need to create variables
            
        - a union can be defined to contain as many members as desired

        - structures can be defined that contain unions, as can arrays

        - pointer to unions can also be declared 
            - their syntax and rules for performing operations are the same as for structs
        
Accesing Union members  
    - we can access/assign data to members of a union just like we access/assign data to members of a struct
        - we use the dot (.) operator to access members of a union
        - we use the -> operator for pointer variables
    
    union {
        int code;
        float cost;
    } item, *item2;

    item.code = 1267;
    
    item2 = &item;
    item2->cost = 2.50;

    