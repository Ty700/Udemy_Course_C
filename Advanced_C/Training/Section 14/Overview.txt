Macros
    - a macro is essentially a piece of code based on the #define directive
        - technically, we have already learned about macro's when we learned about symbolic constants

    - when you first learn about macros, you probably think that they are nothing more than a function call with some strange syntax
    
    - macros are a text processsing feature and are "expanded" and replaced by macro defintions

    - macros in C are considered outdated in terms of modern programming practices
        - howveer, they are still weidely used because they make things easier for the programmer

    Syntax:
        #define MACRO macro_body
            - each #define line has three parts 
                - the first part is the #define directive itself
                - the second part is your chosen abbreviation known as the macro name
                - the third part is the replacement list or body
                    - preprocessor replaces macro name with the macro body
        
        Example:
            #define PX printf("x is %d.\n", x)

    Convention
        - you should use capital letters for macro function names
        
        - there are no spaces in the macro name, however, spaces can appear in the replacement string

        - macros are also not terminated by a semicolon

        - macros run until the newline following the #
            - limited to one line by default unless you use the backslash operator (\) for continuation
        
Macros vs Functions
    - many tasks can be done by using a macro with arguments or by using a function

    - macros are essentially functions with different syntax

    - however, there are some huge differences (under the hood)

    - you must understand that macros are pre-processed which means that all the macros would be processed before your program compiles
        - functions are not preprocessed, they are compiled

    - so, now the question becomes, what are the differences and when should I use one vs. the other
    
    - the main consideration becomes a trade off between time and space

    Speed
        - macro is faster than a function
            - program control must shift to where the function is and then return to the calling program
                - takes long than inline code
        
        - if you intend to use a macro instead of a function primarily to speed up a program
            - first try to determine if it'll even make a difference
        
        - a macro that is used once in a program probably will not have any noticeable improvement

        - a macro inside a nested loop is a much better candidate for speed improvements
            - many systems offer program profiler sto help you pin down where a program spends the most time
        
    Space 
        - when you call a function, it has to allocate some data
            - macros do not have this overhead
            - macros insert code directly into the program
        
        - a macro produces inline code
            - if you use the same macro 20 times, you get 20 lines of code inserted
        
        - functions are preferred over macros when writing large chunchs of code
    
    Other considerations
        - macros have an advantage in that they do not have to worry about variable types
            - deal with character strings, not with actual values
            - a macro can be used equally well with an int or float
        
        - functions give you type checking

        - macros are somewhat tricker to use than regular functions because they can have off side effects if you are not careful
            - some compilers limit the macro defintion to one line, and it is probably best to observe that limit, even if your compiler does not
        
        - it is much harder to debug a macro than when you use a function
            - a function can be stepped through by the debugger and a macro cannot
        
        - inline functions are the best alternative to macros

        - when you add the inline keyword in front of a function, you are hinting to the compiler to embed the function inside the caller

        - inline functions are also type checking

Making your own macro
    Two ways of making macros
        - symbolic constants
        - function
    
    - Symbolic example:
        #define PI 3.14

    - Function Example:
        #define FMAC(a,b) 

        #define macro_name(list_of_identifiers) substitution_string

        - defines a macro and some replacement text
            - the list of identifiers separated by commas, (a,b), appears between parentheses folliwng the macro_name(FMAC)
            - each of these identifiers can appear one or more times in the substitution string

        - after the defintion, it can be used as:

        FMAC(first text, second text);

        - leading or trailing white space around the replacement text is discarded

    Macros with Arguments 
        - you can create function-like macros that look and act much like functions when you pass data to them
        
        - function-like macro defintiins have one or more arguments in parentheses, and these arguments then appear in the replacement portion

        - to create a macro with arguments, put them in parentheses separated by commas after the macro name

        #define SQUARE(X) X*X 
            - can be sued in program like the below:
        
            z = SQUARE(2);
        
            - looks like a function call, but it does not necessarily behave identically

        #define macro_name(list_of_identifiers) substitution_string

            - a macro that contains arguments has its arguments substituted in the replacement text when the macro is expanded
                - the replacement text for a macro is any text on the line after the identifier in the #define directive
                - the replacement text replaces the identifier and argument list inthe program
            
            - you should use parentheses around each argument and around the definition as a whole
                - ensures that the enclosed terms are grouped properly in an expression and avoids operator precedence

    Preprocessor Operators
        - the preprocessor includes the following four operators:
            - \
            - defined
            - #
            - ##
        
        - the backslash (\) operator allows for continuation of a macro to the next line
        - the defined() operator is used in constant expressions to determine if an identifier is defined using #define
        - the # and ## are used for concatenation
            - often useful to merge two tokens into one while expanding macros, called token pasting or token concatenation
        
        - the ('#') operator is used within a macro defintion
            - causes a replacement text token to be converted to a string surrounded by quotes
        
        - the ('##') opeartor performs token pasting
            - concatenates two tokens
            - when a macro is expanded, the two tokens on either side of each '##' operator are combined into a single token
        
        / operator
            -#define MIN(x,y) \
                ((x < y) ? (x) : (y))
        
            - the \ opearor must be the last thing on the line
    
        defined() opeartor
            - the defined operator is used in constant expressions to determine if an identifer is defined using #define
            - Like a header guard, ifdef is shorthand for defined
        
            #if defined(MIN)
                - would evaluate to true

            #ifdef HEADER.H
            ...
            #endif

            Example:
            
            #if defined (WINDOWS) || defined(WINDOWSNT)
            #define BOOT_DRIVE "C:/"
            #else
            #define BOOT_DRIVE "D:/"
            #endif

            - the above will display as output "C:/" if either windows or windowsnt is defined
                - output will be "D:/" otherwise
        
        (# and ##) operators
            - these operators are often useful to merge two tokens into one while expanding macros
        
        # Example
            #define str(x) #x
            - causes the subsequent invocation

            str(testing)

            to be expanded into
            "testing"

            - printf(str(Programming in C is fun.\n));
                is therefore equivalent to:
                    printf("Programming in C is fun.\n");
    
        Example 2:
            #define HELLO(x) printf("Hello, " #x "\n")

            - when HELLO(John) appears in a program, it is expanded to:
                printf("Hello, " "John" "\n");

                - the string "John" replaces #x in the replacement text
        
        Example 3:
            #define printint(var) printf("# var " = %i\n", var)

            printint(count);
                - is expanded into
                    printf("count = %i\n", count);
                
                which, after string concatentation is preformed on the two adjacent string, becomes:
                    printf("count = %i\n", count);
            
            - the # operator gives you a means to create a character string out of a macro argument
                - a space between the # and parameter name is optional
        
        ## Operator 
            - preceded by the name of a parameter to the macro
            - takes the actual argument to the macro that is supplied when the macro is invoked and creates a single token out of the arguement and whatever follows

            - usually both will be identifiers, or one will be an identifer and the other a preprocessing number
                - when pasted, they make a longer identifier
            
            - two tokens that don't together form a valid token can not be pasted together

            - this operator is most useful when one or both of the tokens comes from a macro arguement
                - if either of the tokens next to an '##' is a parameter name
                    - replaced by its actual argument before '##' executres

            #define TOKENCONCAT(x,y) x##y //TokenCONCAK(O,K) is replaced by OK in the program
        
        ## Example:
            #define concatenate(x,y) x##y
                
                int xy = 10;

                printf("%d", concatenate(x,y));

                - compiler will turn above into:
                    printf("%d", xy);
                
                    - which will print out 10

        Example 2:
            #define make_function(name) int my_## name(int foo) {}

            make_function(bar)
                - will define a function called my_bar()
            
        Example 3:
            #define eat(what) puts ("I'm eating" #what "today.\n")

            eat(fruit)
                - will expand to:
                    puts("I'm eating" "fruit" "today.\n");
                
                prints: I'm eating fruit today.

        


