Up until this point, all data from our program accesses is via memory
    - scope and variety of applications you can create is limited

All serious business applications require more data than would fit into main memory
    - also depend on the ability to process data that is persistent and stored on an external device
        such as a disk drive

C provides many function in the header file stdio for writing to and reading from external drives
    - the external device you would use for storing and retrieving data is typically an HDD/SSD.
    - however, the lib will work with virtually any external storage device

Files 
    - programs need to store data on permanent storage

    - a file can store non-volatile data and is usually stored on a disk
        - a named section of storage
        - stdio.h is a file containing useful info
    
    - C views a file as a continous sequence of bytes
        - each byte can be read individually
        - corresponds to the file structure in the Unix environment
    
    - A file has a beginning and an end and a current position
    - the current position is defined by X bytes away from beginning
        - EOF is the flag for end of file

Text and Binary Files
    - there are two ways of writing data to a stream that represents a file
        - text
        - Binary
    - text data is written as a sequence of characters organzied as lines

    - binary data is written as a series of bytes excatly as they appear in memory
    
    - you can write any data you like to a file
        - once a file is written, it just consists of series of bytes
            - even for text
    
    - you have to understand the format of the file in order to read it
        - a sequence of 12 bytes in a binary files could be 12 chars, 12 8-bit signed ints, 12 8-bit unsigned ints, etc
        - in binary mode, each and every byte of the file is accessible

Streams
    - C programs automatically open three files on your behalf
        - standard input - the normal input device for your stream, usually keyboard
        - standard output - usually display on screen via console
        - standard error - usually display screen
    
    - standard input is the file that is read by getchar() and scanf()
    - standard output is used by putchar(), puts(), printf()
        - redirection causes other files to be recognized as the standard input/output
    
    - the purpose of the standard error output file is to provide a logically distinct place to send your error messages

    - a stream is an abstract representation of any external source or destination for your data
        - the keyboard, the command line, and files on a disk are all examples of things you can work with as Streams
        - the C lib provides functins for reading and writing to or from data Streams
            - you use the same input/output functions for reading and writing any external device that is mapped to a stream
        
Accessing Files
    
    - files on disk have a name and the rules for naming files are determined by your OS 
        - you may have to adjust the names depending on what OS your program is running
    
    - a program references a file through a file pointer (or stream pointer, since it works on more than a file)
        - you associate a file pointer with a file programmatically when the program is run 
        - pointers can be reused to point to different files on different occasions

    - a file pointers to a struct of type FILE that represents a stream
        - contains information about the files
            - whether you want to read or write or update a file
            - the address of the buffer in memory to be used for data
            - a pointer to the current position in the file for next operation
        - the above is all set via input/output file operations

    - if you want to use several files simultaneously in a program, you need a seperate file pointer for each file
        - there is a limit to the number of files you can have open at one time
            - defined as FOPEN_MAX in stdio.h
        
    Opening a file
        - you associate a specific external file name with an internal file pointer variable through a process referred to as opening a file
            - via the fopen() function
                - returns the file pointer for a specific external file
        
        - the fopen() function is in the stdio.h

            FILE *fopen(const char* restrict name, const char* restrict mode);

            - first argument to the function is a pointer to a string that is the name of the external file you want to process
                - you can specify the name explicity or you a char pointer that contains the address of the character string that defines the file name
                - you can obtain the file name through the command line, as input from the user, or defined as a const in the program
            
            - the second argument to the fopen() is a character string that represents the file mode
                - specifies what you want to do with the file
                - a file mode specification is a character string between double quotes
            
            - assuming the call to fopen() is successful, the function returns a pointer of type FILE* that you can use to reference the file in further 
                I/O operations using other functions in the library
            
            - if the file cannot be created, will return NULL

    Files Modes (Only for text)

        - "w" - write operations - if file exists will delete what is in it.
        - "a" - append operations - if file exists will add to the end of what is in it.
        - "r" - read operations - can only read thus no modications can be done.

        - "w+" - read & write operation + create file if file can't be found. If it does exist, deletes everything in it.
        - "a+" - append operations + create file if file can't be found.  If it does exist, addiing to the end of what is in it.
        - "r+" - read operations + create file if file can't be found

        - actually idk what the difference between "w" and "w+" are

    Write Mode
        - if you want to write to an existing file with the name myFile.txt 

        File *pFile = NULL;
        char *fileName = "myFile.txt"
        pFile = fopen(fileName, "w");
        if(pFile = NULL){
            //error
        }

        - opens the file associates the file wiht the name myFile.txt with your file pointer in pFile
            - the mode as "w" means you can write to the file
            - you cannot read it
        
        - if a file with the name myFile.txt doesn't exist, the call to fopen() will create a new file with this name

        - on opening a file for writing, the file length is truncated to zero and the position will be at the beginning of any existing data for the first operation
            - any data inside the file will be overwritten and lost 
        
    Append Mode
        - if you want to add to an exisiting text file rather than overwrite it
            - specify "a"
            - append mode
        - this positions the file at the end of the previously written data
            - file doesn't exist, it will create it
        
    Read Mode
        - read only, can't write
        - positions the file to the beginning of the data
        - if you are going to read the file, it must already exist
            - trying to read a file that doesn't exist, it will be NULL
        
    Renaming a file
        - Renaming a file is very easy
            - using the rename() function
        
        Function declaration:
            int rename(const char* oldname, const char* newName);
                - the integer that is returned will be 0 if the change was successful.
                - non-zero otherwise
            - the file must NOT BE open when you call rename, otherwise it will fail
        
    Closing a file
        - Do this when you are finished with a file
        - fclose(FILE* pFile);
            - returns EOF if an error occurs
            - after fclose, point pFile to NULL

    Deleting a file
        - remove() function
            - in stdio.h ofc
        
        remove("myFile.txt");

Reading from a file
    - the fgetc() function reads a character from a text file that has been opened for reading
        - fgetsc() takes a file pointer as its only argument and returns the character read as type int
            - returned type int because of EOF. 
                - thus we can check if fgetc() == EOF to determine if its at the EOF.

        - FILE *pFile = fopen("someFile.txt");
        - int mchar = fgetc(pFile);
    
    - the function getc(), which is equivalent to fgetc(), is also avaliable
        - requires an argument of type FILE* and returns the character read as type int
        - virtually identical to fgetc()
            - only difference between them is the getc() may be implemented as a macro fgetc() is a Function
    
    - you can read the contents of a file again when necessary
        - the rewind() function positions the file that is specified by the file pointer argument at the beginning

    Example:
        #include <stdio.h>
        
        int main(){
            File *fp = NULL;
            int c;

            fp = fopen("file.txt", "r");

            if(fp == NULL){
                perror("Error in opening file");
                EXIT_FAILURE;
            }

            while((c = fgetc(fp)) != EOF){
                printf("%c", c);
            }

            fclose(fp);
            fp = NULL;
            return 0;
        }
        
    Reading a string from a text file
        - you can use the fgets() function to read from any file or Stream

        - char *fgets(char *str, int nChars, FILE *stream);
            - the function reads a string in the memory area pointed to by str from the file specified by stream
                - characters are read until either a '\n' is read or nChars - 1 characters have been read from the stream, whichever occurs first
            
                - if a newline char is read, it's retained in the string
                    - a '\0' character will be appened to the end of the string
                
                - if there is no error, fgets() returns the pointer str
                - if there is an error, returns NULL
                - reading EOF causes NULL to be returned

    Reading formatted input from a file
        - you can get formatted input from a file by using the standard fscanf() function

        int fscanf(FILE *stream, const char *format, ...);

        - first argument to this function is the pointer to a FILE object that identifies the stream
        - the second argument to this function is the format
            - a C string that contains one or more of the following items
                - whitespace char
                - non-white space char
                - format specifiers
                - usage is similar to scanf, but, from a file
        
        - function returns number of item successfully matched and assigned
            *** SEE EXAMPLE.C***

Writing to a file
    
    Writing characters to a text file
        - the simplest write operation is provided by the function fputc()
            - writes a single character to a text file
        
        int fputc(int ch, FILE *pFile);

            - the function writes the character specified by the first arguement to the file identified by the second argument
                - returns the character that was written if successful
                - return EOF if failure
            
            - the putc() function is equivalent to fputc()
                - requires the same arguments and the return type is the same
                -   difference between them is that putc() may be implemented in the stl as a macro, whereas fputc() is a function

    Writing a string to a text file
        - you can use the fputs() function to write to any file or stream

        int fputs(const char *str, FILE *pFile);

            - the first argument is a pointer to the character string that is to be written to the file
            - the second argument i sthe file pointer
            - this function will write characters from a st ring until it reaches a '\0' character
                - can complicate reading back variable-length strings from a file that have been written by fputs()
                - expecting to write a line of text that has a newline character at the end
            
    Writing formatted output to a file
        - the standard function for formatted output to a stream is fprintf()
        
        int fprintf(FILE *stream, const char *format);

        - the first arguement to this function is the pointer to a FILE object that identifies the stream

        - the second argument to this function is the format
            - a C string that contains one or more of the following
                - whitespace char
                - non-white space char
                - format specifiers
                - usage is similar to printf, but, from a file

        Example:
            fprintf(fp, "%s %s %s %s %s", "Hello", "my", "number", "is", 555);

Finding your position in a file

    - for many applications, you need to be able to access data in a file other than sequential order
    - there are various function that you can use to access data in random sequence

    - there are two aspects to file positioning
        - finding out where you are in a file
        - moving to a given point in a file
    
    - you can access a file at a random position regardless of whether you opened the file

    Finding out where you are in a file
        - you have two functions to tell you where you are in a file
            - ftell()
            - fgetpos()

            long ftell(FILE *pFile);

            - this function accepts a file pointer as an argument and returns a long integer value that specifies the current pos in the file

            long fpos = ftell(pfile);
                - the fpos variable now holds the current position in the file and you can use this to return to this position at any time
                    - value is the offset in bytes from the beginning of the file
            
        Example:
            FILE *fp;
            long len;

            fp = fopen("file.txt", "r");
            if(fp == NULL){
                perror("Error");
                return -1;
            }

            fseek(fp, 0, SEEK_END);

            len = ftell(fp);
            fclose(fp);

            printf("Total size of file.txt = %d bytes\n", len);

    fgetpos()
        - the second function providing information on the current file position is a little more complicated
        
        int fgetpos(FILE *pFile, fpos_t* position);
            - the first parameter is a file pointer
            - the second parameter is a pointer to a type that is defined in stdio.h
                - fpos_t is a type that is able to record every position within a file
            - the fgetpos() function is designed to be used with the positioning function fsetpos()
        
        fpos_t here;
        fgetpos(pFile, &here);

        - the above records the current file position (in pFile) within &here variable
        - you must declare a variable of type fpos_t
            - you cannot declare a pointer of type fpos_t because there will not be any memory allocated to store the position data
        
        Example:

        FILE *fp;
        fpos_t position;

        fp = fopen("file.txt", "w+");
        fgetpos(fp, &position);
        fputs("Hello World!", fp);

        fclose(fp);

    Setting a position in a file
        - as a complement to ftell(), you have the fseek()
        
        int fseek(FILE *pfile, long offset, int origin);

        - the first parameter is a pointer to a file you are repositioning
        - the second and third parameters define where you want to go in the file
            - second parameter is an offset from a reference point specified by the third parameter
            - reference point can be one of three values that are specified by the predefined names
                - SEEK_SET - defines the beginning of the file
                - SEEK_CUR - defines the current pos of the file
                - SEEK_END - defines the end of the file
        
        - for a text mode file, the second argument must be a value returned by ftell()

        - the third argument for text mode files must be SEEK_SET
            - for text files, all operations with fseek() are preformed with reference to the beginning of the file
            - for binary files, the offset argument is simply a relative byte count
                - can therefore supply position or negative values for the offset when the reference point is specified as SEEK_CUR
        
        Example:
            FILE *fp;

            fp = fopen("file.txt", "w+");
            fputs("This is jason", fp);

            fseek(fp, 8, SEEK_SET);
            fputs(" Hello, how are you", fp);
            fclose(fp);


        fsetpos()
            - you have the fsetpos() function to go with fgetpos()

            int fsetpos(FILE *pfile, const fpos_t *position);

            - the first parameter is a pointer to the open file
            - the second is a pointer of the fpos_t type
                - the position that is stored at the address was obtained by calling fgetpos()

            fsetpos(pfile, &here);

            - the variable here was previously set by a call to fgetpos()
            - the fsetpos() returns a nonzero value on error or 0 when it succeeds
                - you can only use it to get to a place in a file taht you have been before
                - fseek() allows you to go to any position just by specifying the appropriate offset
            

