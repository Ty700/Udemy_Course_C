Strings - Always hear "C-style string" vs C++ strings so I am gonna take notes.

For chars its:
    char c = 'A';

For char arrays AKA strings:
    char *c = "ABCDEF";

    or

    char *c[] = {'A', 'B', 'C', 'D', 'E', 'F'};

Important:
    Chars = ''
    Strings = ""

To print escape chars, or like special chars that can be interpreted as a format
specifer it's just like C++.

Null-terminated

"This is a string." => "This is a string\0"

Added so compiler knows where string ends.

String is always Null Character.
    Thus string array is always +1
    NULL is a sumbol that represents a memory address that doesn't reference anything
        - for pointers

You can add a \0 char to the end of a string and it will create two strings

example:

printf("The character\0 is used to terminate a string.");

Will print:
    "The character"

The implicit \0 behind the period never gets reached.

Defining a string:

C has no special variable type for strings
    - this means there are no special operators in the language for processing strings
    - the STL provides an extensive range of functions to handle strings.

strings in C are stored in an array of type char.
    - chars in a string are stored in adjacent mem cells, one char per cell.

Declaring:
    char my_string[20];
        - can hold 19 chars as the /0 takes the last one.

Init example:
    char word[] = {'H', 'e', 'l', 'l', 'o', '!'};
        - compiler will compute length of array and add 1 for null char.
        - this way is annoying
    
    char word[] = {"Hello!"};
        - is much better. Let compiler determine length
    
How to assign a value to a string after declaring it

Bad Example:
    char s[100];
    s = "Hello"; 
        - this will not work.
        - since s is an array, you have to specify index to put "Hello"
        - since s is type char, you can't a string in a single cell.
    
    you can use strncpy{} to assign a value to a char array after it has been declared or inited.

My Question:
    - I wonder if you could just use a for loop starting from beginning of char array, taking first index in string
        placing in iterator index, then rinse and repeating to avoid importing a whole lib.

    -maybe even a while until iterator != '\0'

Displaying a string:
    - to display a string as output using the printf function, you do the following:
        printf("The message is: %s", messasge);
            - %s is string format specifier
            - message is the char array

Inputting a string:
    to input a string via the keyboard:

    char input[10];
    printf("Please input your name: ");
        scanf("%s", input);
    
    - don't need to provide & as input is a pointer to the beginning of char array (if it works like C++)

    - will only read up until a space

Testing if two strings are equal:
    - Have to compare each index of the char arrays together
    - can't use s1 == s2

Reminder:
    'x' != "x"
    'x' is a basic char type
    "x" is char array with {'x', '\0'}

Constant Strings

#define and const
    - I know what this is

Two ways of defining constants

#define PI 3.14<numbers>

or 

const float PI = 3.14<numbers>

difference is const float PI is in memory and #define PI is not.

preprocessor replaces everywhere "PI" is with value it's defined to.
    - best way for saving memory (I think)

#define at the top of the program on in an include file if I want to use it in multiple
src files.